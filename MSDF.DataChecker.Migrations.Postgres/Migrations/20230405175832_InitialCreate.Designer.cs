// <auto-generated />
using System;
using MSDF.DataChecker.Persistence.EntityFramework;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MSDF.DataChecker.Migrations.Postgres.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20230405175832_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MSDF.DataChecker.Persistence.Catalogs.Catalog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CatalogType")
                        .HasMaxLength(350)
                        .HasColumnType("character varying(350)");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(350)
                        .HasColumnType("character varying(350)");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Catalogs", "core");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CatalogType = "EnvironmentType",
                            Description = "Ed-Fi v2.X",
                            Name = "Ed-Fi v2.X",
                            Updated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            CatalogType = "EnvironmentType",
                            Description = "Ed-Fi v3.X",
                            Name = "Ed-Fi v3.X",
                            Updated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            CatalogType = "RuleDetailsDestinationType",
                            Description = "EdFiRuleExecutionLogDetails",
                            Name = "EdFiRuleExecutionLogDetails",
                            Updated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("MSDF.DataChecker.Persistence.Collections.Container", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ContainerTypeId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("EnvironmentType")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid?>("ParentContainerId")
                        .HasColumnType("uuid");

                    b.Property<int?>("RuleDetailsDestinationId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ContainerTypeId");

                    b.HasIndex("ParentContainerId");

                    b.HasIndex("RuleDetailsDestinationId");

                    b.ToTable("Containers", "datachecker");
                });

            modelBuilder.Entity("MSDF.DataChecker.Persistence.Collections.ContainerType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ContainerTypes", "core");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Collection"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Folder"
                        });
                });

            modelBuilder.Entity("MSDF.DataChecker.Persistence.DatabaseEnvironments.DatabaseEnvironment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DataSource")
                        .HasColumnType("text");

                    b.Property<string>("Database")
                        .HasColumnType("text");

                    b.Property<string>("ExtraData")
                        .HasColumnType("text");

                    b.Property<string>("MapTables")
                        .HasColumnType("text");

                    b.Property<int?>("MaxNumberResults")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<bool?>("SecurityIntegrated")
                        .HasColumnType("boolean");

                    b.Property<int?>("TimeoutInMinutes")
                        .HasColumnType("integer");

                    b.Property<string>("User")
                        .HasColumnType("text");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("DatabaseEnvironments", "datachecker");
                });

            modelBuilder.Entity("MSDF.DataChecker.Persistence.Logs.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Information")
                        .HasColumnType("text");

                    b.Property<string>("Source")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Logs", "core");
                });

            modelBuilder.Entity("MSDF.DataChecker.Persistence.RuleExecutionLogDetails.EdFiRuleExecutionLogDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CourseCode")
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .HasColumnType("text");

                    b.Property<int?>("EducationOrganizationId")
                        .HasColumnType("integer");

                    b.Property<string>("OtherDetails")
                        .HasColumnType("text");

                    b.Property<string>("ProgramName")
                        .HasColumnType("text");

                    b.Property<int>("RuleExecutionLogId")
                        .HasColumnType("integer");

                    b.Property<string>("StaffUniqueId")
                        .HasColumnType("text");

                    b.Property<string>("StudentUniqueId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RuleExecutionLogId");

                    b.ToTable("EdFiRuleExecutionLogDetails", "destination");
                });

            modelBuilder.Entity("MSDF.DataChecker.Persistence.RuleExecutionLogs.RuleExecutionLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("DatabaseEnvironmentId")
                        .HasColumnType("uuid");

                    b.Property<string>("DetailsSchema")
                        .HasColumnType("text");

                    b.Property<string>("DetailsTableName")
                        .HasColumnType("text");

                    b.Property<string>("DiagnosticSql")
                        .HasColumnType("text");

                    b.Property<bool>("Evaluation")
                        .HasColumnType("boolean");

                    b.Property<string>("ExecutedSql")
                        .HasColumnType("text");

                    b.Property<DateTime>("ExecutionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("ExecutionTimeMs")
                        .HasColumnType("bigint");

                    b.Property<string>("Response")
                        .HasColumnType("text");

                    b.Property<int>("Result")
                        .HasColumnType("integer");

                    b.Property<int?>("RuleDetailsDestinationId")
                        .HasColumnType("integer");

                    b.Property<Guid>("RuleId")
                        .HasColumnType("uuid");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.Property<int?>("ValidationRunId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RuleId");

                    b.HasIndex("ValidationRunId");

                    b.ToTable("RuleExecutionLogs", "destination");
                });

            modelBuilder.Entity("MSDF.DataChecker.Persistence.Rules.Rule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ContainerId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("DiagnosticSql")
                        .HasColumnType("text");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("text");

                    b.Property<int>("ErrorSeverityLevel")
                        .HasColumnType("integer");

                    b.Property<int?>("MaxNumberResults")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Resolution")
                        .HasColumnType("text");

                    b.Property<string>("RuleIdentification")
                        .HasColumnType("text");

                    b.Property<string>("Version")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ContainerId");

                    b.ToTable("Rules", "datachecker");
                });

            modelBuilder.Entity("MSDF.DataChecker.Persistence.Tags.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Tags", "datachecker");
                });

            modelBuilder.Entity("MSDF.DataChecker.Persistence.Tags.TagEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("ContainerId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("RuleId")
                        .HasColumnType("uuid");

                    b.Property<int>("TagId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ContainerId");

                    b.HasIndex("RuleId");

                    b.HasIndex("TagId");

                    b.ToTable("TagEntities", "datachecker");
                });

            modelBuilder.Entity("MSDF.DataChecker.Persistence.UserParams.UserParam", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("DatabaseEnvironmentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DatabaseEnvironmentId");

                    b.ToTable("UserParams", "datachecker");
                });

            modelBuilder.Entity("MSDF.DataChecker.Persistence.ValidationsRun.ValidationRun", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("HostDatabase")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HostServer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RunStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("ValidationRun", "datachecker");
                });

            modelBuilder.Entity("MSDF.DataChecker.Persistence.Collections.Container", b =>
                {
                    b.HasOne("MSDF.DataChecker.Persistence.Collections.ContainerType", "ContainerType")
                        .WithMany()
                        .HasForeignKey("ContainerTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MSDF.DataChecker.Persistence.Collections.Container", "ParentContainer")
                        .WithMany("ChildContainers")
                        .HasForeignKey("ParentContainerId");

                    b.HasOne("MSDF.DataChecker.Persistence.Catalogs.Catalog", "RuleDetailsDestination")
                        .WithMany()
                        .HasForeignKey("RuleDetailsDestinationId");

                    b.Navigation("ContainerType");

                    b.Navigation("ParentContainer");

                    b.Navigation("RuleDetailsDestination");
                });

            modelBuilder.Entity("MSDF.DataChecker.Persistence.RuleExecutionLogDetails.EdFiRuleExecutionLogDetail", b =>
                {
                    b.HasOne("MSDF.DataChecker.Persistence.RuleExecutionLogs.RuleExecutionLog", "RuleExecutionLog")
                        .WithMany()
                        .HasForeignKey("RuleExecutionLogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RuleExecutionLog");
                });

            modelBuilder.Entity("MSDF.DataChecker.Persistence.RuleExecutionLogs.RuleExecutionLog", b =>
                {
                    b.HasOne("MSDF.DataChecker.Persistence.Rules.Rule", null)
                        .WithMany("RuleExecutionLogs")
                        .HasForeignKey("RuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MSDF.DataChecker.Persistence.ValidationsRun.ValidationRun", "ValidationRun")
                        .WithMany()
                        .HasForeignKey("ValidationRunId");

                    b.Navigation("ValidationRun");
                });

            modelBuilder.Entity("MSDF.DataChecker.Persistence.Rules.Rule", b =>
                {
                    b.HasOne("MSDF.DataChecker.Persistence.Collections.Container", null)
                        .WithMany("Rules")
                        .HasForeignKey("ContainerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MSDF.DataChecker.Persistence.Tags.TagEntity", b =>
                {
                    b.HasOne("MSDF.DataChecker.Persistence.Collections.Container", "Container")
                        .WithMany()
                        .HasForeignKey("ContainerId");

                    b.HasOne("MSDF.DataChecker.Persistence.Rules.Rule", "Rule")
                        .WithMany()
                        .HasForeignKey("RuleId");

                    b.HasOne("MSDF.DataChecker.Persistence.Tags.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Container");

                    b.Navigation("Rule");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("MSDF.DataChecker.Persistence.UserParams.UserParam", b =>
                {
                    b.HasOne("MSDF.DataChecker.Persistence.DatabaseEnvironments.DatabaseEnvironment", null)
                        .WithMany("UserParams")
                        .HasForeignKey("DatabaseEnvironmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MSDF.DataChecker.Persistence.Collections.Container", b =>
                {
                    b.Navigation("ChildContainers");

                    b.Navigation("Rules");
                });

            modelBuilder.Entity("MSDF.DataChecker.Persistence.DatabaseEnvironments.DatabaseEnvironment", b =>
                {
                    b.Navigation("UserParams");
                });

            modelBuilder.Entity("MSDF.DataChecker.Persistence.Rules.Rule", b =>
                {
                    b.Navigation("RuleExecutionLogs");
                });
#pragma warning restore 612, 618
        }
    }
}
